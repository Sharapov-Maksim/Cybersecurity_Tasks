import sys

s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


def sub_bytes(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = s_box[s[i][j]]


def inv_sub_bytes(s):
    for i in range(4):
        for j in range(4):
            s[i][j] = inv_s_box[s[i][j]]


def shift_rows(s):
    """Shift rows of state to the left by row number"""
    # [column][row]
    s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
    s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]


def inv_shift_rows(s):
    """Shift rows of state to the right by row number"""
    # [column][row]
    s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1]
    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
    s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3]


def add_round_key(s, k):
    for i in range(4):
        for j in range(4):
            s[i][j] ^= k[i][j]


"""Multiply by x in GF(256)  x = {02}"""
def xtime(a):
    if (a & 0x80)!=0:
        """We should take modulo by irreducible polynomial"""
        return (((a << 1) ^ 0x1B) & 0xFF)
    else:
        return a << 1


def mix_single_column(a):
    s = [a[i] for i in range(Nb)]
    a[0] = xtime(s[0]) ^ xtime(s[1]) ^ s[1] ^ s[2] ^ s[3]
    a[1] = s[0] ^ xtime(s[1]) ^ xtime(s[2]) ^ s[2] ^ s[3]
    a[2] = s[0] ^ s[1] ^ xtime(s[2]) ^ xtime(s[3]) ^ s[3]
    a[3] = xtime(s[0]) ^ s[0] ^ s[1] ^ s[2] ^ xtime(s[3])
    return a


def mix_columns(s):
    for i in range(4):
        mix_single_column(s[i])


"""Multiply in GF(256)"""
def mul(a, b):
    result = 0
    tmp = a
    for i in range(0, 8):
        if b & (0x01 << i) != 0:
            result ^= tmp
        tmp = xtime(tmp)
    return result


def inv_mix_single_column(a):
    s = [a[i] for i in range(Nb)]
    a[0] = mul(s[0], 0x0e) ^ mul(s[1], 0x0b) ^ mul(s[2], 0x0d) ^ mul(s[3], 0x09)
    a[1] = mul(s[0], 0x09) ^ mul(s[1], 0x0e) ^ mul(s[2], 0x0b) ^ mul(s[3], 0x0d)
    a[2] = mul(s[0], 0x0d) ^ mul(s[1], 0x09) ^ mul(s[2], 0x0e) ^ mul(s[3], 0x0b)
    a[3] = mul(s[0], 0x0b) ^ mul(s[1], 0x0d) ^ mul(s[2], 0x09) ^ mul(s[3], 0x0e)
    return a


def inv_mix_columns(s):
    for i in range(4):
        inv_mix_single_column(s[i])


"""First bytes from columns of RCON table"""
r_con = (
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
)


def bytes2matrix(text):
    """ Converts a 16-byte array into a 4x4 matrix.  """
    return [list(text[i:i + 4]) for i in range(0, len(text), 4)]


def matrix2bytes(matrix):
    """ Converts a 4x4 matrix into a 16-byte array.  """
    return bytes(sum(matrix, []))


def xor_bytes(a, b):
    """ Returns a new byte array with the elements xor'ed. """
    return bytes(i ^ j for i, j in zip(a, b))


def pad(plaintext):
    """
    Pads the given plaintext with zeroes to a multiple of 16 bytes.
    """
    padding_len = (16 - (len(plaintext) % 16)) % 16
    padding = bytes([0] * padding_len)
    return plaintext + padding


def split_blocks(message):
    block_size = 16
    assert len(message) % block_size == 0
    return [message[i:i + 16] for i in range(0, len(message), block_size)]


def Cipher(inp, w):
    """
    Encrypts a single block of 16 byte long plaintext.
    :param inp: block of message to be encoded
    :param w: key_matrices from expand_key
    """
    assert len(inp) == 16

    state = bytes2matrix(inp)

    add_round_key(state, w[0])

    for i in range(1, Nr):
        sub_bytes(state)
        shift_rows(state)
        mix_columns(state)
        add_round_key(state, w[i])

    sub_bytes(state)
    shift_rows(state)
    add_round_key(state, w[Nr])
    out = matrix2bytes(state)
    return out


def expand_key(master_key):
    """
    Expands and returns a list of key matrices for the given master_key.
    """
    w_columns = bytes2matrix(master_key)

    i = Nk
    while len(w_columns) < (Nr + 1) * 4:
        temp = list(w_columns[-1])

        if len(w_columns) % Nk == 0:
            temp.append(temp.pop(0))  # Circular shift.
            temp = [s_box[b] for b in temp]  # Map to S-BOX. (SubBytes)
            temp[0] ^= r_con[i // Nk]  # XOR with first byte of R-CON

        elif Nk>6 and i % Nk == 4:
            temp = [s_box[b] for b in temp]

        temp = xor_bytes(temp, w_columns[-Nk])  # XOR with equivalent word from previous iteration.
        w_columns.append(list(temp))
        i += 1

    return [w_columns[4 * i: 4 * (i + 1)] for i in range(len(w_columns) // 4)]


def encrypt_ecb(key, plaintext):
    paddedInput = pad(plaintext)
    inputBlocks = split_blocks(paddedInput)

    if isinstance(key, str):
        key = key.encode('utf-8')

    w = expand_key(key)

    resBlocks = []
    for plaintext_block in inputBlocks:
        block = Cipher(plaintext_block, w)
        resBlocks.append(block)

    encodedMessage = b''.join(resBlocks)
    return encodedMessage


def invCipher(inp, w):
    """
    Decrypts a single block of 16 byte long ciphertext.
    :param inp: block of message to be decoded
    :param w: key_matrices from expand_key
    """
    assert len(inp) == 16

    cipher_state = bytes2matrix(inp)

    add_round_key(cipher_state, w[-1])
    inv_shift_rows(cipher_state)
    inv_sub_bytes(cipher_state)

    for i in range(Nr - 1, 0, -1):
        add_round_key(cipher_state, w[i])
        inv_mix_columns(cipher_state)
        inv_shift_rows(cipher_state)
        inv_sub_bytes(cipher_state)

    add_round_key(cipher_state, w[0])

    return matrix2bytes(cipher_state)


def decrypt_ecb(key, ciphertext):
    assert len(ciphertext) % 16 == 0, "Ciphertext must be made of full 16-byte blocks."
    if isinstance(key, str):
        key = key.encode('utf-8')
    w = expand_key(key)
    resBlocks = []
    for ciphertext_block in split_blocks(ciphertext):
        resBlocks.append(invCipher(ciphertext_block, w))

    return b''.join(resBlocks)


Nb = 4   # Block size = 128 bit
Nk = 4   # Key size = 128 bit
Nr = 10  # 10 Rounds

if __name__ == '__main__':

    if 'encrypt'.startswith(sys.argv[1]):
        file = open('input.txt', 'rb')
        inputMessage = bytearray(file.read())
        print("Size of input: " + str(len(inputMessage)) + " Bytes")
        res = encrypt_ecb(sys.argv[2], inputMessage)
        out = open('output.bin', 'wb')
        out.write(res)
    elif 'decrypt'.startswith(sys.argv[1]):
        file = open('input.bin', 'rb')
        inputMessage = bytearray(file.read())
        print("Size of input: " + str(len(inputMessage)) + " Bytes")
        res = decrypt_ecb(sys.argv[2], inputMessage)
        out = open('output.txt', 'wb')
        out.write(res)
    else:
        print('Expected command "encrypt" or "decrypt" in first argument and key in second argument')

